import numpy as np
from tabulate import tabulate


def lu(A, b):
    n = len(A)
    L = np.zeros((n, n))
    U = np.zeros((n, n))
    y = np.zeros_like(b)


    for i in range(n):
        # Заполнение верхней треугольной матрицы U
        for k in range(i, n):
            sum_upper = sum(L[i][j] * U[j][k] for j in range(i))
            U[i][k] = A[i][k] - sum_upper  # Элемент матрицы U

        L[i][i] = 1  # Диагональные элементы матрицы L равны 1
        # Заполнение нижней треугольной матрицы L
        for k in range(i + 1, n):
            sum_lower = sum(L[k][j] * U[j][i] for j in range(i))
            L[k][i] = (A[k][i] - sum_lower) / U[i][i]  # Элемент матрицы L

    print(tabulate(L), tabulate(U))

    # Прямой ход метода решения
    for i in range(n):
        sum_forward = sum(L[i][j] * y[j] for j in range(i))
        y[i] = b[i] - sum_forward

    x = np.zeros_like(y)

    # Обратный ход метода решения
    for i in reversed(range(n)):
        sum_backward = sum(U[i][j] * x[j] for j in range(i + 1, n))
        x[i] = (y[i] - sum_backward) / U[i][i]  

    return x

def main():
    A1 = np.array([
        [0.411, 0.421, -0.333, 0.313, -0.141, -0.381, 0.245],
        [0.241, 0.705, 0.139, -0.409, 0.321, 0.0625, 0.101],
        [0.123, -0.239, 0.502, 0.901, 0.243, 0.819, 0.321],
        [0.413, 0.309, 0.801, 0.865, 0.423, 0.118, 0.183],
        [0.241, -0.221, -0.243, 0.134, 1.274, 0.712, 0.423],
        [0.281, 0.525, 0.719, 0.118, -0.974, 0.808, 0.923],
        [0.246, -0.301, 0.231, 0.813, -0.702, 1.223, 1.105],
    ])
    b1 = np.array([0.096, 1.252, 1.024, 1.023, 1.155, 1.937, 1.673])

    A2 = np.array([
        [1.231, -0.231, 0.613, -0.314, 0.281, 0.271, -0.301],
        [-0.421, 1.052, 0.128, 0.523, -0.328, 0.813, 0.291],
        [0.319, -0.123, 1.402, 0.319, 0.714, -0.213, 0.134],
        [-0.314, 0.413, 0.217, 1.118, 0.412, -0.319, 0.284],
        [0.213, -0.328, 0.913, 0.251, 1.105, 0.114, -0.213],
        [-0.231, 0.412, -0.214, 0.319, 0.522, 1.312, 0.319],
        [0.142, 0.318, -0.231, 0.216, -0.213, 0.421, 1.089],
    ])
    b2 = np.array([0.823, 1.231, 0.912, 1.132, 0.926, 1.543, 0.874])

    A3 = np.array([
        [0.531, 0.621, -0.211, 0.213, 0.431, 0.112, 0.125],
        [0.331, 1.105, 0.112, -0.209, 0.621, -0.221, 0.211],
        [-0.213, -0.331, 1.211, 0.401, 0.201, 0.713, 0.321],
        [0.311, 0.213, 0.419, 1.165, 0.523, -0.118, 0.193],
        [0.121, -0.121, -0.321, 0.214, 1.372, 0.512, 0.413],
        [0.212, 0.412, 0.719, 0.218, -0.671, 1.312, 0.823],
        [-0.126, -0.213, 0.314, 0.713, -0.812, 1.002, 1.015],
    ])
    b3 = np.array([1.012, 0.923, 1.131, 0.874, 1.564, 1.213, 0.932])

    x1 = lu(A1, b1)

    print("Решение первой системы Ax = b:", x1, end="\n\n")

    residual1 = b1 - np.dot(A1, x1)
    residual_norm1 = np.linalg.norm(residual1)
    print("Невязка решения (норма вектора b - Ax):", residual_norm1, end="\n\n")

    x2 = lu(A2, b2)

    print("Решение второй системы Ax = b:", x2, end="\n\n")

    residual2 = b2 - np.dot(A2, x2)
    residual_norm2 = np.linalg.norm(residual2)
    print("Невязка решения (норма вектора b - Ax):", residual_norm2, end="\n\n")

    x3 = lu(A3, b3)

    print("Решение третьей системы Ax = b:", x3, end="\n\n")

    residual3 = b3 - np.dot(A3, x3)
    residual_norm3 = np.linalg.norm(residual3)
    print("Невязка решения (норма вектора b - Ax):", residual_norm3, end="\n\n")

if __name__ == "__main__":
    main()
